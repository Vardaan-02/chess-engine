#pragma once
#include "board.h"
#include <array>

namespace Eval {

const std::array<int, 64> pawn_middlegame = {
      0,   0,   0,   0,   0,   0,   0,   0,
     50,  50,  50,  50,  50,  50,  50,  50,
     10,  10,  20,  30,  30,  20,  10,  10,
      5,   5,  10,  25,  25,  10,   5,   5,
      0,   0,   0,  20,  20,   0,   0,   0,
      5,  -5, -10,   0,   0, -10,  -5,   5,
      5,  10,  10, -20, -20,  10,  10,   5,
      0,   0,   0,   0,   0,   0,   0,   0
};

const std::array<int, 64> pawn_endgame = {
      0,   0,   0,   0,   0,   0,   0,   0,
     80,  80,  80,  80,  80,  80,  80,  80,
     50,  50,  50,  50,  50,  50,  50,  50,
     30,  30,  30,  30,  30,  30,  30,  30,
     20,  20,  20,  20,  20,  20,  20,  20,
     10,  10,  10,  10,  10,  10,  10,  10,
     10,  10,  10,  10,  10,  10,  10,  10,
      0,   0,   0,   0,   0,   0,   0,   0
};

const std::array<int, 64> knight_middlegame = {
    -50, -40, -30, -30, -30, -30, -40, -50,
    -40, -20,   0,   0,   0,   0, -20, -40,
    -30,   0,  10,  15,  15,  10,   0, -30,
    -30,   5,  15,  20,  20,  15,   5, -30,
    -30,   0,  15,  20,  20,  15,   0, -30,
    -30,   5,  10,  15,  15,  10,   5, -30,
    -40, -20,   0,   5,   5,   0, -20, -40,
    -50, -40, -30, -30, -30, -30, -40, -50
};

const std::array<int, 64> knight_endgame = {
    -50, -30, -20, -20, -20, -20, -30, -50,
    -30, -10,   0,   5,   5,   0, -10, -30,
    -20,   0,  10,  15,  15,  10,   0, -20,
    -20,   5,  15,  20,  20,  15,   5, -20,
    -20,   5,  15,  20,  20,  15,   5, -20,
    -20,   0,  10,  15,  15,  10,   0, -20,
    -30, -10,   0,   5,   5,   0, -10, -30,
    -50, -30, -20, -20, -20, -20, -30, -50
};

const std::array<int, 64> bishop_middlegame = {
    -20, -10, -10, -10, -10, -10, -10, -20,
    -10,   0,   0,   0,   0,   0,   0, -10,
    -10,   0,   5,  10,  10,   5,   0, -10,
    -10,   5,   5,  10,  10,   5,   5, -10,
    -10,   0,  10,  10,  10,  10,   0, -10,
    -10,  10,  10,  10,  10,  10,  10, -10,
    -10,   5,   0,   0,   0,   0,   5, -10,
    -20, -10, -10, -10, -10, -10, -10, -20
};

const std::array<int, 64> bishop_endgame = {
    -20, -10, -10, -10, -10, -10, -10, -20,
    -10,   0,   5,   5,   5,   5,   0, -10,
    -10,   5,  10,  10,  10,  10,   5, -10,
    -10,   5,  10,  10,  10,  10,   5, -10,
    -10,   5,  10,  10,  10,  10,   5, -10,
    -10,   5,  10,  10,  10,  10,   5, -10,
    -10,   0,   5,   5,   5,   5,   0, -10,
    -20, -10, -10, -10, -10, -10, -10, -20
};

const std::array<int, 64> rook_middlegame = {
      0,  0,  0,  0,  0,  0,  0,  0,
      5, 10, 10, 10, 10, 10, 10,  5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
      0,  0,  0,  5,  5,  0,  0,  0
};

const std::array<int, 64> rook_endgame = {
      0,  0,  0,  0,  0,  0,  0,  0,
     10, 15, 15, 15, 15, 15, 15, 10,
     10, 15, 15, 15, 15, 15, 15, 10,
     10, 15, 15, 15, 15, 15, 15, 10,
     10, 15, 15, 15, 15, 15, 15, 10,
     10, 15, 15, 15, 15, 15, 15, 10,
     10, 15, 15, 15, 15, 15, 15, 10,
      0,  0,  0,  0,  0,  0,  0,  0
};


const std::array<int, 64> queen_middlegame = {
    -20, -10, -10,  -5,  -5, -10, -10, -20,
    -10,   0,   0,   0,   0,   0,   0, -10,
    -10,   0,   5,   5,   5,   5,   0, -10,
     -5,   0,   5,   5,   5,   5,   0,  -5,
      0,   0,   5,   5,   5,   5,   0,  -5,
    -10,   5,   5,   5,   5,   5,   0, -10,
    -10,   0,   5,   0,   0,   0,   0, -10,
    -20, -10, -10,  -5,  -5, -10, -10, -20
};

const std::array<int, 64> queen_endgame = {
    -30, -20, -10, -10, -10, -10, -20, -30,
    -20, -10,   0,   5,   5,   0, -10, -20,
    -10,   0,  10,  15,  15,  10,   0, -10,
    -10,   5,  15,  20,  20,  15,   5, -10,
    -10,   5,  15,  20,  20,  15,   5, -10,
    -10,   0,  10,  15,  15,  10,   0, -10,
    -20, -10,   0,   5,   5,   0, -10, -20,
    -30, -20, -10, -10, -10, -10, -20, -30
};

// King is a liability in middlegame, but a fighting piece in endgame
const std::array<int, 64> king_middlegame = {
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -30, -40, -40, -50, -50, -40, -40, -30,
    -20, -30, -30, -40, -40, -30, -30, -20,
    -10, -20, -20, -20, -20, -20, -20, -10,
     20,  20,   0,   0,   0,   0,  20,  20,
     20,  30,  10,   0,   0,  10,  30,  20
};

const std::array<int, 64> king_endgame = {
    -50, -30, -20, -10, -10, -20, -30, -50,
    -30, -10,   0,  10,  10,   0, -10, -30,
    -20,   0,  15,  20,  20,  15,   0, -20,
    -10,  10,  20,  25,  25,  20,  10, -10,
    -10,  10,  20,  25,  25,  20,  10, -10,
    -20,   0,  15,  20,  20,  15,   0, -20,
    -30, -10,   0,  10,  10,   0, -10, -30,
    -50, -30, -20, -10, -10, -20, -30, -50
};


// Material values
constexpr int PAWN_VALUE   = 100;
constexpr int KNIGHT_VALUE = 320;
constexpr int BISHOP_VALUE = 330;
constexpr int ROOK_VALUE   = 500;
constexpr int QUEEN_VALUE  = 900;

// Bishop pair bonus
constexpr int BISHOP_PAIR_MG = 30;
constexpr int BISHOP_PAIR_EG = 50;

// Pawn structure penalties
constexpr int DOUBLED_PAWN_PENALTY_MG = -25;
constexpr int DOUBLED_PAWN_PENALTY_EG = -35;
constexpr int ISOLATED_PAWN_PENALTY_MG = -15;
constexpr int ISOLATED_PAWN_PENALTY_EG = -25;

// Passed pawn bonus (per rank, so this is multiplied)
constexpr int PASSED_PAWN_BONUS_MG = 15;
constexpr int PASSED_PAWN_BONUS_EG = 30;

} // namespace Eval